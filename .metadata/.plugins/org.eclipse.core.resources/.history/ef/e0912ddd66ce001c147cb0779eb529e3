package com.customer.service.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.customer.service.client.Account;
import com.customer.service.client.Credit;
import com.customer.service.client.Report;
import com.customer.service.model.Customer;
import com.customer.service.repository.CustomerRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	private CustomerRepository customerRepository;

	@Override
	public Mono<Customer> addCustomer(Customer c) {

		return customerRepository.save(c);
	}

	@Override
	public Mono<Customer> updateCustomer(Customer c) {
		int idCustomer = c.getId();
		if (idCustomer < 0) {
			c.setId(idCustomer);
		}
		return customerRepository.save(c);
	}

	@Override
	public Flux<Customer> getAllCustomer() {

		return customerRepository.findAll();
	}

	@Override
	public Mono<Customer> getCustomerById(int id) {

		return customerRepository.findById(id);
	}

	@Override
	public Mono<Customer> getCustomerByNroDoc(int nroDocument) {

		return customerRepository.findByNroDocument(nroDocument);
	}

	@Override
	public void deleteCustomer(int id) {
		customerRepository.deleteById(id);

	}

	@Override
	public Mono<Customer> getCustomerByTypeCustomer(String typeCustomer) {

		return customerRepository.findByTypeCustomer(typeCustomer);
	}

	// ************************************METODOS
	// WebClient*****************************************

	@Override
	public Mono<Account> getAccountByNroDoc(int nroDocument) {
		Mono<Account> account = WebClient.create("http://localhost:8002").get().uri("/account/customer/" + nroDocument)
				.retrieve().bodyToMono(Account.class);
		return account;
	}

	@Override
	public Mono<Account> addAccount(int nroDocument, Account a) {
		a.setNroDocument(nroDocument);
		Mono<Account> nuevoAccount = WebClient.create("http://localhost:8002").post().uri("/account")
				.body(Mono.just(a), Account.class).retrieve().bodyToMono(Account.class);
		return nuevoAccount;
	}

	@Override
	public Mono<Credit> getCreditByNroDoc(int nroDocument) {
		Mono<Credit> credit = WebClient.create("http://localhost:8003").get().uri("/credit/customer/" + nroDocument)
				.retrieve().bodyToMono(Credit.class);
		return credit;
	}

	@Override
	public Mono<Credit> addCredit(int nroDocument, Credit credit) {
		credit.setNroDocument(nroDocument);
		Mono<Credit> nuevoCredit = WebClient.create("http://localhost:8003").post().uri("/credit")
				.body(Mono.just(credit), Credit.class).retrieve().bodyToMono(Credit.class);
		return nuevoCredit;
	}

	@Override
	public Mono<Report> getCustomerAndProducts(int nroDocument) {
		Report report = new Report();

		Mono<Customer> customer = customerRepository.findByNroDocument(nroDocument);


		Flux<Account> account = WebClient.create("http://localhost:8002").get().uri("/account/customer/" + nroDocument)
				.retrieve().bodyToFlux(Account.class);


		Flux<Credit> credit = WebClient.create("http://localhost:8003").get().uri("/credit/customer/" + nroDocument)
				.retrieve().bodyToFlux(Credit.class);
		
		report.setCustomer(customer);
		
		report.setAccount(account);
		
		report.setCredit(credit);

		return Mono.just(report);
	}

}
